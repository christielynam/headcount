// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ComparisonCard should match the snapshot with 1 active district 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ComparisonCard
    activeCards={
      Array [
        Object {
          "active": true,
          "location": "ACADEMY 20",
          "stats": Object {
            "2004": "0.302",
            "2005": "0.267",
            "2006": "0.354",
            "2007": "0.392",
            "2008": "0.385",
            "2009": "0.39",
            "2010": "0.436",
            "2011": "0.489",
            "2012": "0.479",
            "2013": "0.488",
            "2014": "0.49",
          },
        },
      ]
    }
    activeCount={1}
    compareAverages={[MockFunction]}
    findAverage={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): false,
  Symbol(enzyme.__nodes__): Array [
    false,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`ComparisonCard should match the snapshot with 2 active districts 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ComparisonCard
    activeCards={
      Array [
        Object {
          "active": true,
          "location": "ACADEMY 20",
          "stats": Object {
            "2004": "0.302",
            "2005": "0.267",
            "2006": "0.354",
            "2007": "0.392",
            "2008": "0.385",
            "2009": "0.39",
            "2010": "0.436",
            "2011": "0.489",
            "2012": "0.479",
            "2013": "0.488",
            "2014": "0.49",
          },
        },
      ]
    }
    activeCount={1}
    compareAverages={[MockFunction]}
    findAverage={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): false,
  Symbol(enzyme.__nodes__): Array [
    false,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`ComparisonCard should match the snapshot with no active districts 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ComparisonCard
    activeCards={Array []}
    activeCount={0}
    compareAverages={[MockFunction]}
    findAverage={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): false,
  Symbol(enzyme.__nodes__): Array [
    false,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
